local path = require "path"-----------------------------------------------------------local exec dolocal lua_version_tlocal function lua_version()  if not lua_version_t then     local version = rawget(_G,"_VERSION")    local maj,min = version:match("^Lua (%d+)%.(%d+)$")    if maj then                         lua_version_t = {tonumber(maj),tonumber(min)}    elseif not math.mod then            lua_version_t = {5,2}    elseif table.pack and not pack then lua_version_t = {5,2}    else                                lua_version_t = {5,2} end  end  return lua_version_t[1], lua_version_t[2]endlocal LUA_MAJOR, LUA_MINOR = lua_version()local LUA_VERSION = LUA_MAJOR * 100 + LUA_MINORlocal LUA_52 = 502local function read_file(n)  local f, e = io.open(n, "r")  if not f then return nil, e end  local d, e = f:read("*all")  f:close()  return d, eendexec = function(cwd, cmd, ...)  local tmpfile = path.tmpname()  if ... then cmd = cmd .. ' ' .. string.format(...) end  cmd = cmd .. ' >"' .. tmpfile .. '" 2>&1'  local p = path.currentdir()  path.chdir(cwd)  local res1,res2,res2 = os.execute(cmd)  path.chdir(p)  local data = read_file(tmpfile)  path.remove(tmpfile)  if LUA_VERSION < LUA_52 then    return res1==0, res1, data  end  return res1, res2, dataendend-----------------------------------------------------------local function git_exec(cwd, ...)  local ok, status, msg = exec(cwd, 'git', ...)  if not ok then return ok, msg or status end  return msg or ''endlocal function git_version()  return git_exec('.', '--version')endlocal function git_last_log(cwd, fmt)  return git_exec(cwd, '--no-pager log -1 --pretty=format:%s', fmt)endlocal function make_git_log_getter(fmt)  return function(cwd) return git_last_log(cwd, fmt) endendlocal git_id                   = make_git_log_getter'%H'local git_last_author_name     = make_git_log_getter'%aN'local git_last_author_email    = make_git_log_getter'%ae'local git_last_committer_name  = make_git_log_getter'%cN'local git_last_committer_email = make_git_log_getter'%ce'local git_last_message         = make_git_log_getter'%s'local git_current_branch       = function (cwd)  local str, err = git_exec(cwd, 'branch --list --no-column')  if not str then return nil, err end  return str:match("%*%s+([^\n\r]+)")endlocal git_remotes              = function (cwd)  local str, err = git_exec(cwd, 'remote -v')  if not str then return nil, err end  local res = {}  str:gsub("%s*(%S+)%s+([^\n\r]+)%((%a+)%)%s*\r?\n", function(name, url, mode)    if mode == 'fetch' then res[name] = url end  end)  return resend-----------------------------------------------------------local GitRepoInfo = {} doGitRepoInfo.__index = GitRepoInfofunction GitRepoInfo:new(repo_path)  repo_path = path.fullpath(repo_path)  if not path.isdir(repo_path) then    return nil, 'git rep does not exists'  end  local ver, err = git_version()  if not ver then    return nil, err  end  local o = setmetatable({    _path = repo_path  }, self)  return oendGitRepoInfo.path                  = function(self) return self._path                             endGitRepoInfo.version               = function(self) return git_version              ()            endGitRepoInfo.id                    = function(self) return git_id                   (self:path()) endGitRepoInfo.last_author_name      = function(self) return git_last_author_name     (self:path()) endGitRepoInfo.last_author_email     = function(self) return git_last_author_email    (self:path()) endGitRepoInfo.last_committer_name   = function(self) return git_last_committer_name  (self:path()) endGitRepoInfo.last_committer_email  = function(self) return git_last_committer_email (self:path()) endGitRepoInfo.last_message          = function(self) return git_last_message         (self:path()) endGitRepoInfo.current_branch        = function(self) return git_current_branch       (self:path()) endGitRepoInfo.remotes               = function(self) return git_remotes              (self:path()) endend-----------------------------------------------------------return GitRepoInfo